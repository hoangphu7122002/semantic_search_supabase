-- Drop existing table if exists
drop table if exists screen_analysis;

-- Enable vector extension
create extension if not exists vector;

-- Create table with correct structure
create table screen_analysis (
    id bigint primary key generated always as identity,
    screen_id bigint references screens(id),
    site_url text,
    webp_url text,
    web_analysis jsonb,
    image_analysis jsonb,
    embedding vector(1536),
    created_at timestamp with time zone default timezone('utc'::text, now()),
    updated_at timestamp with time zone default timezone('utc'::text, now())
);

-- Create indexes
create index screen_analysis_screen_id_idx on screen_analysis(screen_id);
create index screen_analysis_site_url_idx on screen_analysis(site_url);
create index screen_analysis_embedding_idx on screen_analysis using ivfflat (embedding vector_cosine_ops);


-- Enable vector extension if not exists
create extension if not exists vector;

-- Create screen_analysis_fusion table
create table screen_analysis_fusion (
    id bigint primary key generated always as identity,
    screen_id bigint references screens(id),
    site_url text not null,
    web_analysis jsonb,                    -- Kết quả phân tích HTML
    image_analyses jsonb[],                -- Array các kết quả phân tích ảnh
    fused_analysis jsonb,                  -- Kết quả fusion từ web và image analyses
    embedding vector(1536),                -- Vector embedding (để dùng sau)
    created_at timestamp with time zone default timezone('utc'::text, now()),
    updated_at timestamp with time zone default timezone('utc'::text, now())
);

-- Create indexes
create index screen_analysis_fusion_screen_id_idx on screen_analysis_fusion(screen_id);
create index screen_analysis_fusion_site_url_idx on screen_analysis_fusion(site_url);
create index screen_analysis_fusion_embedding_idx on screen_analysis_fusion using ivfflat (embedding vector_cosine_ops);

-- Add RLS policies if needed
alter table screen_analysis_fusion enable row level security;

-- Optional: Add a function to update updated_at timestamp
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql;

create trigger update_screen_analysis_fusion_updated_at
    before update on screen_analysis_fusion
    for each row
    execute function update_updated_at_column();

-- Drop existing match_embeddings functions
drop function if exists match_embeddings(vector, float, int, text);
drop function if exists match_embeddings(vector, int, text);

-- Create function for vector similarity search
create or replace function match_embeddings(
  query_embedding vector(1536),
  top_k int,
  table_name text
)
returns table (
  id bigint,
  screen_id bigint,
  site_url text,
  webp_url text,
  similarity float
)
language plpgsql
as $$
#variable_conflict use_column
declare
  query text;
begin
  -- Construct dynamic query based on table name
  if table_name = 'screen_analysis' then
    query := format('
      select 
        id,
        screen_id,
        site_url,
        webp_url,
        1 - (embedding <=> %L::vector) as similarity
      from screen_analysis
      where embedding is not null
      order by similarity desc
      limit %s
    ', query_embedding, top_k);
  elsif table_name = 'screen_analysis_fusion' then
    query := format('
      select 
        id,
        screen_id,
        site_url,
        null as webp_url,
        1 - (embedding <=> %L::vector) as similarity
      from screen_analysis_fusion
      where embedding is not null
      order by similarity desc
      limit %s
    ', query_embedding, top_k);
  else  -- screen_html_analysis
    query := format('
      select 
        id,
        screen_id,
        site_url,
        null as webp_url,
        1 - (embedding <=> %L::vector) as similarity
      from screen_html_analysis
      where embedding is not null
      order by similarity desc
      limit %s
    ', query_embedding, top_k);
  end if;
  
  return query execute query;
end;
$$;

-- Grant necessary permissions
grant execute on function match_embeddings to postgres, anon, authenticated, service_role;

-- Tạo bảng mới cho phân tích HTML
create table screen_html_analysis (
    id bigint primary key generated always as identity,
    screen_id bigint references screens(id),
    site_url text,
    web_analysis jsonb,
    embedding vector(1536),
    created_at timestamp with time zone default timezone('utc'::text, now()),
    updated_at timestamp with time zone default timezone('utc'::text, now())
);

-- Tạo indexes
create index screen_html_analysis_screen_id_idx on screen_html_analysis(screen_id);
create index screen_html_analysis_site_url_idx on screen_html_analysis(site_url);
create index screen_html_analysis_embedding_idx on screen_html_analysis using ivfflat (embedding vector_cosine_ops);

-- Create function for HTML similarity search
create or replace function match_html_embeddings(
  query_embedding vector(1536),
  top_k int
)
returns table (
  id bigint,
  screen_id bigint,
  site_url text,
  similarity float
)
language plpgsql
as $$
begin
  return query
  select 
    ha.id,
    ha.screen_id,
    ha.site_url,
    1 - (ha.embedding <=> query_embedding) as similarity
  from screen_html_analysis ha
  where ha.embedding is not null
  order by similarity desc
  limit top_k;
end;
$$;

-- Grant necessary permissions
grant execute on function match_html_embeddings to postgres, anon, authenticated, service_role;